variables:
  DOCKER_REGISTRY: 561395264517.dkr.ecr.us-east-2.amazonaws.com
  APP_NAME: com.sampleproject
  TAG: "$CI_COMMIT_SHORT_SHA-$CI_PIPELINE_ID"
  

stages:
    - build
    - build-docker-image
    - push-image-to-aws-ecr
    - release

1-maven-build:
 stage: build
 tags:
   - sonar
 script: 
   - mvn clean package
   - TAG=$(mvn --non-recursive help:evaluate -Dexpression=project.version | grep -v '\[.*')
   - SERVICE_NAME=$(mvn --non-recursive help:evaluate -Dexpression=project.artifactId | grep -v '\[.*')
   - echo $SERVICE_NAME $TAG > project.txt

 artifacts:
      paths:
        - target/*.jar
        - project.txt

2-build-docker-image:
  stage: build-docker-image
  needs: ["1-maven-build"]
  tags:
   - sonar
  script:
    - SERVICE_NAME=$(head -n 1 project.txt | cut -d' ' -f1)
    - TAG=$(head -n 1 project.txt | cut -d' ' -f2)
    - jar_name=$SERVICE_NAME-$TAG.jar
    - docker info
    - docker build --build-arg jar_name=$jar_name -t $SERVICE_NAME:$TAG .

3-Push-Docker-Image-to-AWS-ECR:
  stage: push-image-to-aws-ecr
  tags:
   - sonar
  image: 
    name: $DOCKER_REGISTRY/$APP_NAME:"$TAG"
  services:
    - docker:dind
  script:
    - SERVICE_NAME=$(head -n 1 project.txt | cut -d' ' -f1)
    - TAG=$(head -n 1 project.txt | cut -d' ' -f2)
    - aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin $DOCKER_REGISTRY
    - docker tag $SERVICE_NAME:$TAG $DEV_ACCOUNT_ID.dkr.ecr.us-east-2.amazonaws.com/$SERVICE_NAME:$TAG
    - docker push $DEV_ACCOUNT_ID.dkr.ecr.us-east-2.amazonaws.com/$SERVICE_NAME:$TAG
  

4-scanImage-test:
  stage: release
  tags:
    - sonar
  script:
    - SERVICE_NAME=$(head -n 1 project.txt | cut -d' ' -f1)
    - TAG=$(head -n 1 project.txt | cut -d' ' -f2)
    - >-
      aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin $DOCKER_REGISTRY

    
    - >-
      echo $(aws ecr --region us-east-2 describe-image-scan-findings
      --repository-name $SERVICE_NAME --image-id imageTag=$TAG) >>
      imageScanResults.json
    
    - >-
      if [ -z $(jq '.imageScanStatus.status' imageScanResults.json) ]; then echo
      "Could not get scan results from ECR, may be image is not uploaded or
      tagged wrongly"; exit 1; else echo "Successfully got scan results from
      ECR"; fi
    - >-
    
      ScanResults=$(jq '.imageScanFindings.findingSeverityCounts'
      imageScanResults.json)

    - echo "Scan results are below" 
    
    - 'echo "Scan status:" $(jq ''.imageScanStatus.status'' imageScanResults.json)'
    - 'echo "Scan results:" $ScanResults'
    - >-
      if [[ $ScanResults =~ "MEDIUM" || $ScanResults =~ "HIGH" || $ScanResults
      =~ "CRITICAL" ]]; then echo "Vulnerabilities found.. Stopping the
      pipeline. PFB vulnerability details..";cat imageScanResults.json;echo "Removing image";
      aws ecr --region us-east-2 batch-delete-image --repository-name $SERVICE_NAME --image-id imageTag=$TAG; 
      exit 1; else echo "No serious vulnerabilities found.. Proceeding for next jobs in
      pipeline."; fi



    
    
    

